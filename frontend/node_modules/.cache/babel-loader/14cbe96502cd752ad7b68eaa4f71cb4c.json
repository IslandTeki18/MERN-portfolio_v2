{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/landonmckell/PracticeProjects/Portfolio/frontend/src/screens/AdminContactDetailsScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getContactDetails, updateContact } from \"../actions/contactActions\";\nimport { CONTACT_UPDATE_RESET } from \"../constants/contactConstants\";\n\nconst AdminContactDetailsScreen = ({\n  match\n}) => {\n  _s();\n\n  const [haveRead, setHaveRead] = useState(false);\n  const dispatch = useDispatch();\n  const contactDetails = useSelector(state => state.contactDetails);\n  const {\n    loading,\n    error,\n    contact\n  } = contactDetails;\n  console.log(contact);\n  const contactUpdate = useSelector(state => state.contactUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = contactUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: CONTACT_UPDATE_RESET\n      });\n      history.push(\"/\");\n    }\n\n    dispatch(getContactDetails(match.params.id));\n  }, [dispatch, match]); // haveread handler\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateContact({\n      _id: haveRead\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      className: \"btn btn-light m-3\",\n      to: \"/admin/viewcontacts\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-8 offset-md-2 my-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Contact Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"em\", {\n                children: \"Name: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 19\n              }, this), contact.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"em\", {\n                children: \"Phone:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 19\n              }, this), contact.phone]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"em\", {\n                children: \"Email: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this), contact.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"em\", {\n                children: \"Message:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 19\n              }, this), contact.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: submitHandler,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"havereadSelection\",\n                  children: \"Confirm Read Message?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-check\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    className: \"form-check-input\",\n                    type: \"checkbox\",\n                    value: haveRead,\n                    id: \"haveReadCheck\",\n                    onChange: e => setHaveRead(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"form-check-label mb-3\",\n                    htmlFor: \"haveReadCheck\",\n                    children: \"Yes, I have read the contact information.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-primary\",\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AdminContactDetailsScreen, \"Y1yZCc++5w07zGbJEQuMK7OMBs4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = AdminContactDetailsScreen;\nexport default AdminContactDetailsScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminContactDetailsScreen\");","map":{"version":3,"sources":["/Users/landonmckell/PracticeProjects/Portfolio/frontend/src/screens/AdminContactDetailsScreen.js"],"names":["useState","useEffect","Link","Loader","Message","useSelector","useDispatch","getContactDetails","updateContact","CONTACT_UPDATE_RESET","AdminContactDetailsScreen","match","haveRead","setHaveRead","dispatch","contactDetails","state","loading","error","contact","console","log","contactUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","history","push","params","id","submitHandler","e","preventDefault","_id","name","phone","email","message","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getContactDetails, updateContact } from \"../actions/contactActions\";\nimport { CONTACT_UPDATE_RESET } from \"../constants/contactConstants\";\n\nconst AdminContactDetailsScreen = ({ match }) => {\n  const [haveRead, setHaveRead] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const contactDetails = useSelector((state) => state.contactDetails);\n  const { loading, error, contact } = contactDetails;\n  console.log(contact);\n\n  const contactUpdate = useSelector((state) => state.contactUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n  } = contactUpdate;\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: CONTACT_UPDATE_RESET })\n      history.push(\"/\")\n    }\n    dispatch(getContactDetails(match.params.id));\n  }, [dispatch, match]);\n\n  // haveread handler\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(updateContact({ _id: haveRead }));\n  };\n\n  return (\n    <>\n      <Link className=\"btn btn-light m-3\" to=\"/admin/viewcontacts\">\n        Go Back\n      </Link>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-8 offset-md-2 my-4\">\n            <h2>Contact Details</h2>\n            {loading ? (\n              <Loader />\n            ) : error ? (\n              <Message>{error}</Message>\n            ) : (\n              <>\n                <hr />\n                <p>\n                  <em>Name: </em>\n                  {contact.name}\n                </p>\n                <p>\n                  <em>Phone:</em>\n                  <br />\n                  {contact.phone}\n                </p>\n                <p>\n                  <em>Email: </em>\n                  {contact.email}\n                </p>\n                <p>\n                  <em>Message:</em>\n                  <br />\n                  {contact.message}\n                </p>\n                <hr />\n                <form onSubmit={submitHandler}>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"havereadSelection\">\n                      Confirm Read Message?\n                    </label>\n                    <div className=\"form-check\">\n                      <input\n                        className=\"form-check-input\"\n                        type=\"checkbox\"\n                        value={haveRead}\n                        id=\"haveReadCheck\"\n                        onChange={(e) => setHaveRead(e.target.value)}\n                      />\n                      <label\n                        className=\"form-check-label mb-3\"\n                        htmlFor=\"haveReadCheck\"\n                      >\n                        Yes, I have read the contact information.\n                      </label>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                      Update\n                    </button>\n                  </div>\n                </form>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AdminContactDetailsScreen;\n"]},"metadata":{},"sourceType":"module"}